@prefix pl: <http://purl.org/ontology/swipl/>.
@prefix : <http://example.org/>.



{(?a ?b ?c) :concat ?d} <=
	{(?a ?b) pl:concat ?t.
	 (?t ?c) pl:concat ?d.}.

#
# part_of(Query,Graph,Bindings). 
# Graph <= GraphCond ?
# prove(GraphCond,Bindings)
#
# prove(A<=B) => A and B
#
# vars should just be ?... atoms
#
# prove(graph1,[(?a,a),(?b,b),(?c,c)])
# prove(graph2,[(?a,a),(?b,b),(?c,c)])
# prove(triple([?a,?b],pl:concat,?t),[(?a,a),(?b,b),(?c,c)|T])
# prove(triple([a,b],pl:concat,?t),[(?a,a),(?b,b),(?c,c)|T])
# triple([a,b],pl:concat,T,[(?t,T)])
# triple([a,b],pl:concat,ab,[(?t,ab)])
# prove(triple([a,b],pl:concat,ab),[(?a,a),(?b,b),(?c,c),(?t,ab)]|T)
# prove(triple([?t,?c],pl:concat,?d),[(?a,a),(?b,b),(?c,c),(?t,ab)|T])
# prove(triple([ab,c],pl:concat,?d),[(?a,a),(?b,b),(?c,c),(?t,ab)|T])
# triple([ab,c],pl:concat,abc,[(?d,abc)])
# prove(graph1,[(?a,a),(?b,b),(?c,c),(?t,ab),(?d,abc)])



