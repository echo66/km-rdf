@prefix qm: <http://www.elec.qmul.ac.uk/digitalmusic/vamp/>.
@prefix vamp: <http://www.vamp-plugins.org/>.
@prefix mp: <http://purl.org/ontology/mp/>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix mo: <http://purl.org/ontology/mo/>.
@prefix tl: <http://purl.org/NET/c4dm/timeline.owl#>.
@prefix event: <http://purl.org/NET/c4dm/event.owl#>.
@prefix tr: <http://purl.org/NET/c4dm/rdftr.n3#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix : <#>.

# this `query', when interpreted, dereferences qm:chromagram, gets 
# the corresponding plugin, and compute the chromagram using this particular
# algorithm on the <test.wav> audio file
<test.wav> qm:chromagram _:chromagram.
# non interpreted, it means: 
# exists _:chromagram / <test.wav> qm:chromagram _:chromagram

# rule giving instrument in similar tracks (what happens if i specify the
# "determinism" of a property defined in the head of a rule?)
{
	?track :instrument_in_similar_tracks _:instrument
} <= {
	{?track mo:encodes _:signal} tr:seq
		{
		{
		_:signal qm:sb_similar_to _:signal2
		} tr:seq 
			{
			_:signal2 qm:chetry_instrument _:instrument
			}
		}
	}.


# this "rule" wraps a transaction using the qm:key-detector VAMP
# plugin, and spits out tonic events on the timeline of the 
# corresponding signal
{
_:tonicevent a event:Event.
_:tonicevent!event:time!tl:onTimeLine=?signal!mo:time!tl:onTimeLine.
_:tonicevent tl:startsAt ?start.
_:tonicevent mp:note ?note.
} <= {
	{?af a mo:AudioFile; mo:encodes ?signal.} tr:seq
		{
		?signal qm:keydetector (?tonics _:modes _:keys).
		?tonic list:in ?tonics;
			qm:startsAt ?start;
			qm:note ?note;
			.
		}
     }.

#
# triple(TonicEvent,rdf:type,event:Event,__graph1) :-
#	rdf_bnode(TonicEvent),
#	triple(
#
#
#
#


# This query, when interpreted, will fire the above defined rule (well, if
# the proof mechanism is bw, otherwise it will just get back results that were
# computed when interpreting the rule)

<test.wav> mo:encodes _:signal.
_:signal mo:time _:sigtime.
_:sigtime tl:onTimeLine _:tl.
_:tonicevent a event:Event;
	event:time [
		tl:onTimeLine _:tl 
	];
	.

